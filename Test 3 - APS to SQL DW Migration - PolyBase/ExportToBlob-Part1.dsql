/**************************************************************************************
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, this document should not be interpreted to be a commitment on the
part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.

This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT.

Complying with all applicable copyright laws is the responsibility of the user. Without limiting the rights under copyright, no part of this
document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical,
photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation.

Microsoft may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this
document. Except as expressly provided in any written license agreement from Microsoft, the furnishing of this document does not give you any
license to these patents, trademarks, copyrights, or other intellectual property.
*************************************************************************************
History
Date		Name			Description			
03/27/2017	Arshad Ali		Created
**************************************************************************************/
USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name like 'APSMigration')
	DROP DATABASE APSMigration;

CREATE DATABASE APSMigration
WITH   
   (REPLICATED_SIZE = 2 GB,  
   DISTRIBUTED_SIZE = 2 GB,  
   LOG_SIZE = 5 GB );  

USE APSMigration;
--step 1: define all parameters
DECLARE @SchemaForExternalTable VARCHAR(255) = 'EXTSQLDW'
DECLARE @SqlQuery VARCHAR(8000)
DECLARE @SchemaName VARCHAR(255)
DECLARE @TableName VARCHAR(255)
DECLARE @DatabaseName VARCHAR(255)

IF EXISTS(SELECT * FROM sys.tables WHERE name like 'DatabasesToInclude')
	DROP TABLE DatabasesToInclude;
CREATE TABLE DatabasesToInclude (databasename varchar(255));
--step 2: define databases that you want to include 
INSERT INTO DatabasesToInclude VALUES ('AdventureWorksPDW2012')


IF EXISTS(SELECT * FROM sys.tables WHERE name like 'DatabasesToProcess')
	DROP TABLE DatabasesToProcess;
CREATE TABLE DatabasesToProcess (databasename varchar(255))

IF EXISTS(SELECT * FROM sys.tables WHERE name like 'ScriptOutput')
	DROP TABLE ScriptOutput;
CREATE TABLE ScriptOutput (databasename varchar(255), objecttype varchar(255), objectname varchar(255), script varchar(8000))

INSERT INTO DatabasesToProcess 
SELECT name FROM sys.databases WHERE name IN (SELECT databasename FROM DatabasesToInclude)

WHILE EXISTS (SELECT TOP 1 databasename FROM DatabasesToProcess)
BEGIN
	SET @DatabaseName = (SELECT TOP 1 databasename FROM DatabasesToProcess)

	SET @SqlQuery = 'USE ' + @DatabaseName + '; IF EXISTS(SELECT * FROM sys.schemas WHERE name = ''' + @SchemaForExternalTable + ''')
	DROP SCHEMA [' + @SchemaForExternalTable + '];
	EXEC(''CREATE SCHEMA [' + @SchemaForExternalTable + '] AUTHORIZATION dbo;'')'

	INSERT INTO ScriptOutput (databasename, objectname, objecttype, script)
	SELECT @DatabaseName, @SchemaForExternalTable,'schema', @SqlQuery
	
	IF EXISTS(SELECT * FROM sys.tables WHERE name like 'TablesToProcess')
		DROP TABLE TablesToProcess;
	CREATE TABLE TablesToProcess (schemaname varchar(255), tablename varchar(255))

	SET @SqlQuery = 'INSERT INTO TablesToProcess (schemaname, tablename) 
	select sc.name, so.name     
	from ' + @DatabaseName + '.sys.tables so  
	join ' + @DatabaseName + '.sys.schemas sc on so.schema_id = sc.schema_id  
	left join ' + @DatabaseName + '.sys.external_tables et on so.object_id = et.object_id    
	where et.name is NULL and so.type = ''U'' order by so.name' 

	EXEC(@SqlQuery)

	WHILE EXISTS (SELECT TOP 1 tablename FROM TablesToProcess)
	BEGIN
		SET @TableName = (SELECT TOP 1 tablename FROM TablesToProcess)
		SET @SchemaName = (SELECT TOP 1 schemaname FROM TablesToProcess WHERE tablename = @TableName)

		SET @SqlQuery = 'IF EXISTS(SELECT * FROM sys.external_tables WHERE name = ''' + @SchemaName + '.' + @TableName + ''')   
							DROP TABLE [' + @SchemaForExternalTable + '].[' + @SchemaName + '.' + @TableName + ']; '

		SET @SqlQuery = @SqlQuery + ' CREATE EXTERNAL TABLE [' + @SchemaForExternalTable + '].[' + @SchemaName + '.' + @TableName + ']
			WITH ( 
				LOCATION = ''/' + @DatabaseName + '/' + @SchemaName + '/' + @TableName + '/'',
				DATA_SOURCE = ds_blobstorage,
				FILE_FORMAT = ff_textdelimited,
				REJECT_TYPE = VALUE,
				REJECT_VALUE = 0
			)
			AS SELECT * FROM ' + @DatabaseName + '.[' + @SchemaName + '].[' + @TableName + '];';

		INSERT INTO ScriptOutput (databasename, objectname, objecttype, script)
		SELECT @DatabaseName, @TableName,'table', @SqlQuery	

		DELETE FROM TablesToProcess WHERE tablename = @TableName
	END
	DELETE FROM DatabasesToProcess WHERE databasename = @DatabaseName
END
GO
select * from ScriptOutput order by databasename asc, objecttype asc, objectname asc 
USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name like 'APSMigration')
	DROP DATABASE APSMigration;