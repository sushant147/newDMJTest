/**************************************************************************************
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, this document should not be interpreted to be a commitment on the
part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.

This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT.

Complying with all applicable copyright laws is the responsibility of the user. Without limiting the rights under copyright, no part of this
document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical,
photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation.

Microsoft may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this
document. Except as expressly provided in any written license agreement from Microsoft, the furnishing of this document does not give you any
license to these patents, trademarks, copyrights, or other intellectual property.
*************************************************************************************
History
Date		Name			Description			
03/31/2017	Arshad Ali		Created
*************************************************************************************
Note - If the script lenght is more than 8000 characters, this script will provide a SQL
Query which you need to execute to move all those objects manually
*/
USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name like 'APSMigration')
	DROP DATABASE APSMigration;

CREATE DATABASE APSMigration
WITH   
   (REPLICATED_SIZE = 2 GB,  
   DISTRIBUTED_SIZE = 2 GB,  
   LOG_SIZE = 5 GB );  

USE APSMigration;
DECLARE @SqlQuery VARCHAR(8000)
DECLARE @DatabaseName VARCHAR(255) 

IF EXISTS(SELECT * FROM sys.tables WHERE name like 'DatabasesToInclude')
	DROP TABLE DatabasesToInclude;
CREATE TABLE DatabasesToInclude (databasename varchar(255));
INSERT INTO DatabasesToInclude VALUES ('APS_ETL_Framework')

IF EXISTS(SELECT * FROM tempdb.sys.tables WHERE name like 'DatabasesToProcess%')
	DROP TABLE DatabasesToProcess;
CREATE TABLE DatabasesToProcess (databasename varchar(255))

IF EXISTS(SELECT * FROM sys.tables WHERE name like 'ScriptOutput')
	DROP TABLE ScriptOutput;
CREATE TABLE ScriptOutput (databasename varchar(255), objecttype varchar(255), objectname varchar(255), script varchar(8000))


INSERT INTO DatabasesToProcess 
SELECT name FROM sys.databases WHERE name IN (SELECT databasename FROM DatabasesToInclude)

WHILE EXISTS (SELECT TOP 1 databasename FROM DatabasesToProcess)
BEGIN
	SET @DatabaseName = (SELECT TOP 1 databasename FROM DatabasesToProcess)

	SET @SqlQuery = 'INSERT INTO ScriptOutput (databasename, objectname, objecttype, script)
	select ''' + @DatabaseName + ''', ob.name, type_desc, definition + '';''
	from ' + @DatabaseName + '.sys.objects ob 
	join ' + @DatabaseName + '.sys.sql_modules mo on ob.object_id = mo.object_id
	WHERE DATALENGTH(definition) < 8000
	order by ob.object_id;'
	EXEC(@SqlQuery)

	SET @SqlQuery = 'select ''' + @DatabaseName + ''', ob.name, type_desc, definition 
	from ' + @DatabaseName + '.sys.objects ob 
	join ' + @DatabaseName + '.sys.sql_modules mo on ob.object_id = mo.object_id
	WHERE DATALENGTH(definition) >= 8000
	order by ob.object_id;'
	SELECT @SqlQuery

	DELETE FROM DatabasesToProcess WHERE databasename = @DatabaseName
END
GO

select * from ScriptOutput order by databasename asc, objecttype asc, objectname asc 

USE master;
IF EXISTS(SELECT * FROM sys.databases WHERE name like 'APSMigration')
	DROP DATABASE APSMigration;


