/**************************************************************************************
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, this document should not be interpreted to be a commitment on the
part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.

This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT.

Complying with all applicable copyright laws is the responsibility of the user. Without limiting the rights under copyright, no part of this
document may be reproduced, stored in or introduced into a retrieval system, or transmitted in any form or by any means (electronic, mechanical,
photocopying, recording, or otherwise), or for any purpose, without the express written permission of Microsoft Corporation.

Microsoft may have patents, patent applications, trademarks, copyrights, or other intellectual property rights covering subject matter in this
document. Except as expressly provided in any written license agreement from Microsoft, the furnishing of this document does not give you any
license to these patents, trademarks, copyrights, or other intellectual property.

****This process my result in slow processing for very large systems with 100's of tables. ****
****We are aware of this issue and working on a resolution **** 
**************************************************************************************/
USE <<SQL DW DatabaseName>>;
--step 1: define all parameters
DECLARE @FormatType VARCHAR(100) = 'DELIMITEDTEXT'
DECLARE @FieldDelimiter VARCHAR(10) = '^|^'
DECLARE @DateFormat VARCHAR(12) = 'MM/dd/yyyy'
DECLARE @DataCompression VARCHAR(100) = 'org.apache.hadoop.io.compress.GzipCodec' 
DECLARE @AzureStorageAccount VARCHAR(1000) = 'wasbs://<containername>@<accountname>.blob.core.windows.net/'
DECLARE @AzureStorageAccessKey VARCHAR(1000) = '************************'

--step 2: Create Database Master Key if not created already
IF NOT EXISTS (SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
BEGIN
	CREATE MASTER KEY
END

--step 3: Create credential to connect to blob storage 
SET @SqlQuery = 'CREATE DATABASE SCOPED CREDENTIAL cred_blobstorage WITH IDENTITY = ''dbo'', 
SECRET = ''' + @AzureStorageAccessKey + ''';'
EXEC(@SqlQuery);

--step 4: create external file format 
SET @SqlQuery = 'IF EXISTS (SELECT * FROM sys.external_file_formats WHERE name = ''ff_textdelimited'')
	DROP EXTERNAL FILE FORMAT ff_textdelimited;
CREATE EXTERNAL FILE FORMAT ff_textdelimited
WITH (
    FORMAT_TYPE = ' + @FormatType + ',
    FORMAT_OPTIONS ( 
        FIELD_TERMINATOR = ''' + @FieldDelimiter + ''',
        DATE_FORMAT = ''' + @DateFormat + '''
    ),
  DATA_COMPRESSION = ''' + @DataCompression + '''
);'
EXEC(@SqlQuery);

--step 5: define the external data source which points to the right blob storage account and container. 
SET @SqlQuery = 'IF EXISTS (SELECT * FROM sys.external_data_sources WHERE name = ''ds_blobstorage'')   
	DROP EXTERNAL DATA SOURCE ds_blobstorage; 
CREATE EXTERNAL DATA SOURCE ds_blobstorage
    WITH ( 
        TYPE = HADOOP,
        LOCATION = ''' + @AzureStorage + '''
 );'
EXEC(@SqlQuery);

--step 6: copy output from Script column here after executing ImportFromBlob-Part.dsql



